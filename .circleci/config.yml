version: 2.1

# Define the jobs we want to run for this project
jobs:
  ios:
    macos:  # indicate that we are using the macOS executor
      xcode: 11.7.0
    environment:
      IOS_VERSION: 12.4
      DEVICE_NAME: TestiPhoneX
    steps:
      - checkout
      - run: npm install -g react-native-cli
      - run: |
          gem install xcode-install
      - run: |
          xcrun simctl create $DEVICE_NAME com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-12-4 > deviceid.txt 
          DEVICEUUID=`cat deviceid.txt`          
          echo $DEVICEUUID
          xcrun simctl boot $DEVICEUUID &
          sed -i -e "s/{IOS-DEVICE-UDID}/$DEVICEUUID/g" appium.ios.conf.js
          sed -i -e "s/{IOS-DEVICE-PLATFORM-VERSION}/$IOS_VERSION/g" appium.ios.conf.js
          sed -i -e "s/{IOS-DEVICE-NAME}/$DEVICE_NAME/g" appium.ios.conf.js
          cat appium.ios.conf.js
      - run: |
          rm -rf node_modules
          npm cache clean --force
          rm -rf package-lock.json
      - run: gem install cocoapods
      - run: npm install --save-dev
      - run: npm audit fix
      - run: npm install --save-dev chai
      - run: |
          cd ios && pod install --repo-update && cd ..
      - run: |
          npm start --reset-cache &> metro-ios.log &
          sleep 30
      - run: |
          react-native run-ios --simulator=$DEVICE_NAME &> build-ios.log
          sleep 30
          BUILT_APP=`find ~/Library/Developer/Xcode/DerivedData -name HelloWorld.app | grep Build/Products/Debug-iphonesimulator/HelloWorld.app`
          mkdir -p ios/build/HelloWorld/Build/Products/Debug-iphonesimulator
          cp -R $BUILT_APP ios/build/HelloWorld/Build/Products/Debug-iphonesimulator
          npm run e2e-test:ios -- Sanity &> test-execution-console-ios.log
      - store_artifacts:
          path: metro-ios.log
          destination: metro-ios.log
      - store_artifacts:
          path: build-ios.log
          destination: build-ios.log
      - store_artifacts:
          path: test-execution-console-ios.log
          destination: test-execution-console-ios.log
      - store_artifacts:
          path: __tests__/e2e/test-results
          destination: test-results-ios
  android:
    macos:  # indicate that we are using the macOS executor
      xcode: 11.7.0
    steps:
      - checkout
      - run: npm install -g react-native-cli
      - run: |
          brew install --cask homebrew/cask-versions/adoptopenjdk8
          brew install gradle
          brew install android-sdk
          brew install android-platform-tools
      - run: |
          export JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home
          export PATH=$JAVA_HOME/bin:$PATH
          java -version
          echo "y" | sdkmanager --install 'system-images;android-28;google_apis;x86_64'
          echo "no" | avdmanager create avd -n test_device -k 'system-images;android-28;google_apis;x86_64' --force
          echo emulator -list-avds
          echo "Starting emulator"
          nohup emulator -avd test_device -no-snapshot > /dev/null 2>&1 &
          adb devices
          echo "Emulator started"
      - run: |
          rm -rf node_modules
          npm cache clean --force
          rm -rf package-lock.json
      - run: npm install --save-dev
      - run: npm audit fix
      - run: npm install --save-dev chai
      - run: |
          npm start --reset-cache &> metro-android.log &
          sleep 30
      - run: |
          react-native run-android &> build-android.log
          sleep 30
          npm run e2e-test:android -- Sanity &> test-execution-console-android.log
      - store_artifacts:
          path: metro-android.log
          destination: metro-android.log
      - store_artifacts:
          path: build-android.log
          destination: build-android.log
      - store_artifacts:
          path: test-execution-console-android.log
          destination: test-execution-console-android.log
      - store_artifacts:
          path: __tests__/e2e/test-results
          destination: test-results-android

# Orchestrate our job run sequence
workflows:
  build_and_test:
    jobs:
      #- ios
      - android